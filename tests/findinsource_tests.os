// необходима библиотека 1testrunner
#Использовать asserts

Перем юТест;
Перем ВременныйКаталог;
Перем НастройкиВыполнения;
Перем КоллекцияРезультатаОбразец;
Перем ОбщиеМетоды;

Функция ПолучитьСписокТестов(Тестирование) Экспорт
	юТест = Тестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуПоискаОбъектом");
	//ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуПоискаКомандойСистемы");
	
	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	// подготовка временного каталога
	Если Не ЗначениеЗаполнено(ВременныйКаталог) Тогда
		ВременныйКаталог = ТекущийСценарий().Каталог + "/temp_tests_" + Лев(Строка(Новый УникальныйИдентификатор()), 8);
		Если НайтиФайлы(ВременныйКаталог).Количество() > 0 Тогда
			УдалитьФайлы(ВременныйКаталог + "/", "*");
		Иначе
			СоздатьКаталог(ВременныйКаталог);
		КонецЕсли;
	КонецЕсли;

	// подготовка тестовых данных
	КопироватьФайл(ТекущийСценарий().Каталог + "/fixtures/testfile1.bsl", ВременныйКаталог + "/testfile1.bsl");
	
	КоллекцияСтрокПоиска = ОбщиеМетоды.ПрочитатьФайлJSON(ТекущийСценарий().Каталог + "/fixtures/findsource_options.json");
	КоллекцияРезультатаОбразец = ОбщиеМетоды.ПрочитатьФайлJSON(ТекущийСценарий().Каталог + "/fixtures/findsource_result.json");

	// подготовка файла настроек
	НастройкиВыполнения = Новый Соответствие;
	НастройкиВыполнения.Вставить("ВременныйКаталог", ВременныйКаталог);
	НастройкиВыполнения.Вставить("КоллекцияСтрокПоиска", КоллекцияСтрокПоиска);
	КоллекцияФайловДляАнализа = Новый Массив;
	СоответствиеОписанияФайла = Новый Соответствие;
	СоответствиеОписанияФайла.Вставить("ВременныйКаталог", ВременныйКаталог);
	СоответствиеОписанияФайла.Вставить("ИмяФайлаДоВременногоКаталога", "testfile1.bsl");
	КоллекцияФайловДляАнализа.Добавить(СоответствиеОписанияФайла);
	НастройкиВыполнения.Вставить("КоллекцияФайловДляАнализа", КоллекцияФайловДляАнализа);
	НастройкиВыполнения.Вставить("ФайлРезультатаПроцесса", ВременныйКаталог + "/test_result.json");
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		Утверждения.ПроверитьИстину(НайтиФайлы(ВременныйКаталог, "*").Количество() > 0, "Во временном каталоге " + ВременныйКаталог + " не должно остаться файлов");
		Попытка
			УдалитьФайлы(ВременныйКаталог + "/", "*");
			УдалитьФайлы(ВременныйКаталог);
		Исключение
			Сообщить("Не удалось удалить временный каталог ("+ ВременныйКаталог + "): " + ОписаниеОшибки())
		КонецПопытки;
		НайденныеФайлы = НайтиФайлы(ВременныйКаталог);
		Утверждения.ПроверитьИстину(НайденныеФайлы.Количество() = 0, "Временный каталог должен быть удален");
		ВременныйКаталог = "";
	КонецЕсли;
	НастройкиВыполнения = Неопределено;
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуПоискаОбъектом() Экспорт

	ТекстОшибки = "";
	Попытка
		// подключим объект
		ПодключитьСценарий("./src/findinsource.os", "ТипПоиска");
		ОбъектПоиска = Новый ТипПоиска(НастройкиВыполнения);
		ОбъектПоиска.Инициализация();

		// выполним поиск
		Результат = ОбъектПоиска.ПоискВФайлахПоШаблону();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ВременныйКаталог = Неопределено;
	КонецПопытки;

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Если Не ОбщиеМетоды.КоллекцииСовпадают(КоллекцияРезультатаОбразец, Результат) Тогда
		ТекстОшибки = "Коллекция результата отлична от образца (временный каталог: " + ВременныйКаталог + ")";
		ВременныйКаталог = Неопределено;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуПоискаКомандойСистемы() Экспорт

	ТекстОшибки = "";
	Попытка
		// запишем настройки в файл
		ИмяФайлаНастроек = ВременныйКаталог + "/test_options.json";
		ОбщиеМетоды.ЗаписатьФайлJSON(ИмяФайлаНастроек, НастройкиВыполнения);
		
		// выполним поиск командой системы
		СтрокаКоманды = "oscript src/findinsource.os """ + ИмяФайлаНастроек + """";
		ПроцессТеста = СоздатьПроцесс(СтрокаКоманды, ".", Истина);
		ПроцессТеста.Запустить();
		ТекстВывода = "";
		Пока НЕ ПроцессТеста.Завершен ИЛИ ПроцессТеста.ПотокВывода.ЕстьДанные ИЛИ ПроцессТеста.ПотокОшибок.ЕстьДанные Цикл
			Приостановить(500);
			
			ОчереднаяСтрокаВывода = ПроцессТеста.ПотокВывода.Прочитать();
			ОчереднаяСтрокаОшибок = ПроцессТеста.ПотокОшибок.Прочитать();
			Если Не ПустаяСтрока(ОчереднаяСтрокаВывода) Тогда
				ТекстВывода = ТекстВывода + Символы.ПС + ОчереднаяСтрокаВывода;
			КонецЕсли;
			
			Если Не ПустаяСтрока(ОчереднаяСтрокаОшибок) Тогда
				ТекстВывода = ТекстВывода + Символы.ПС + ОчереднаяСтрокаОшибок;
			КонецЕсли;
		КонецЦикла;

		// проверим результат
		Результат = ОбщиеМетоды.ПрочитатьФайлJSON(НастройкиВыполнения.Получить("ФайлРезультатаПроцесса"));
	Исключение
		ТекстОшибки = ТекстВывода + Символы.ПС + ОписаниеОшибки();
		ВременныйКаталог = Неопределено;
	КонецПопытки;

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Если Не ОбщиеМетоды.КоллекцииСовпадают(КоллекцияРезультатаОбразец, Результат) Тогда
		ТекстОшибки = "Коллекция результата отлична от образца (временный каталог: " + ВременныйКаталог + ")";
		ВременныйКаталог = Неопределено;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

ОбщиеМетоды = ЗагрузитьСценарий("./src/commonmethods.os");