// необходима библиотека 1testrunner
#Использовать asserts
#Использовать v8runner

Перем юТест;
Перем ВременныйКаталог;
Перем ОбщиеМетоды;

Функция ПолучитьСписокТестов(Тестирование) Экспорт
	юТест = Тестирование;

	ВсеТесты = Новый Массив;
	
	//ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеИсходниковИзФайлаКонфигурации");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеИсходниковИзХранилищаКонфигурации");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеИсходниковИзХранилищаКонфигурацииВерсии1");
	//ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеИсходниковИзФайлаРасширенияКонфигурации");
	//ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеИсходниковИзХранилищаРасширенияКонфигурации");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеИсходниковИзПутиКФайлу");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеИсходниковИзПутиКФайлуНеПоМаске");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеИсходниковИзПутиККаталогу");
	//ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеИсходниковИзГит");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеИсходниковОбработокИзБазы");

	//ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуКомандойПоПутиКФайлу");
	
	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	// подготовка временного каталога
	Если Не ЗначениеЗаполнено(ВременныйКаталог) Тогда
		ВременныйКаталог = ТекущийСценарий().Каталог + "\temp_tests_" + Лев(Строка(Новый УникальныйИдентификатор()), 8);
		Если НайтиФайлы(ВременныйКаталог).Количество() > 0 Тогда
			УдалитьФайлы(ВременныйКаталог + "\", "*");
		Иначе
			СоздатьКаталог(ВременныйКаталог);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		Попытка
			ОбщиеМетоды.УдалитьФайлыРекурсивно(ВременныйКаталог);
		Исключение
			Сообщить("Не удалось удалить временный каталог ("+ ВременныйКаталог + "): " + ОписаниеОшибки())
		КонецПопытки;
		Утверждения.ПроверитьИстину(НайтиФайлы(ВременныйКаталог + "\", "*").Количество() = 0, "Во временном каталоге " + ВременныйКаталог + " не должно остаться файлов");
		Утверждения.ПроверитьИстину(НайтиФайлы(ВременныйКаталог).Количество() = 0, "Временный каталог должен быть удален");
		ВременныйКаталог = "";
	КонецЕсли;
	НастройкиВыполнения = Неопределено;
КонецПроцедуры

#Область Готовые_тесты

Процедура ТестДолжен_ПроверитьПолучениеИсходниковИзПутиКФайлу() Экспорт
	Попытка
		// подготовка тестовых данных
		КопироватьФайл(ТекущийСценарий().Каталог + "\fixtures\testfile1.bsl", ВременныйКаталог + "\testfile.bsl");

		// готовим настройки
		НастройкиВыполнения = Новый Соответствие;
		НастройкиВыполнения.Вставить("ВременныйКаталог", ВременныйКаталог);
		
		ОписаниеИсходника = Новый Соответствие;
		ОписаниеИсходника.Вставить("ТипИсходника", "src");
		ОписаниеИсходника.Вставить("Source", ВременныйКаталог + "\testfile.bsl");
		НастройкиВыполнения.Вставить("ОписаниеИсходника", ОписаниеИсходника);

		ФорматыФайловДляАнализа = Новый Массив;
		ФорматыФайловДляАнализа.Добавить(".\.bsl");
		ФорматыФайловДляАнализа.Добавить(".\.os");
		НастройкиВыполнения.Вставить("ФорматыФайловДляАнализа", ФорматыФайловДляАнализа);

		НастройкиВыполнения.Вставить("ФайлОбработкиВыгрузкиДопОбработок", ".\tools\savehandlers.epf");
		НастройкиВыполнения.Вставить("ВерсияПлатформы", "8.3.17.1851");
		НастройкиВыполнения.Вставить("ИспользоватьРежимАгента", Ложь);
		
		// готовим объект
		ПодключитьСценарий(".\src\extractsource.os", "ТипВыгрузкаИПоискИсходников");
		ОбъектВыгрузкиИПоиска = Новый ТипВыгрузкаИПоискИсходников(НастройкиВыполнения);
		ОбъектВыгрузкиИПоиска.Инициализация();

		// выполнение операций
		Результат = ОбъектВыгрузкиИПоиска.ВыгрузитьИНайтиИсходники();
	Исключение
		ВременныйКаталог = Неопределено;
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

	// читаем образец результата
	ОбразецРезультата = Новый Массив;
	ОписаниеФайла = Новый Соответствие;
	ОписаниеФайла.Вставить("ВременныйКаталог", "");
	ОписаниеФайла.Вставить("ИмяФайлаДоВременногоКаталога", ВременныйКаталог + "\testfile.bsl");
	ОбразецРезультата.Добавить(ОписаниеФайла);

	// проверка результатов
	Если Не ОбщиеМетоды.КоллекцииСовпадают(Результат, ОбразецРезультата) Тогда
		ТекстОшибки = "Коллекция результата отлична от образца (временный каталог: " + ВременныйКаталог + ")";
		ОбщиеМетоды.ЗаписатьФайлJSON(ВременныйКаталог + "\incorrect_result.json", Результат);
		ОбщиеМетоды.ЗаписатьФайлJSON(ВременныйКаталог + "\example_result.json", ОбразецРезультата);
		ВременныйКаталог = Неопределено;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеИсходниковИзПутиКФайлуНеПоМаске() Экспорт
	Попытка
		// подготовка тестовых данных
		КопироватьФайл(ТекущийСценарий().Каталог + "\fixtures\testfile1.bsl", ВременныйКаталог + "\testfile.txt");

		// готовим настройки
		НастройкиВыполнения = Новый Соответствие;
		НастройкиВыполнения.Вставить("ВременныйКаталог", ВременныйКаталог);
		
		ОписаниеИсходника = Новый Соответствие;
		ОписаниеИсходника.Вставить("ТипИсходника", "src");
		ОписаниеИсходника.Вставить("Source", ВременныйКаталог + "\testfile.txt");
		НастройкиВыполнения.Вставить("ОписаниеИсходника", ОписаниеИсходника);

		ФорматыФайловДляАнализа = Новый Массив;
		ФорматыФайловДляАнализа.Добавить(".\.bsl");
		ФорматыФайловДляАнализа.Добавить(".\.os");
		НастройкиВыполнения.Вставить("ФорматыФайловДляАнализа", ФорматыФайловДляАнализа);

		НастройкиВыполнения.Вставить("ФайлОбработкиВыгрузкиДопОбработок", ".\tools\savehandlers.epf");
		НастройкиВыполнения.Вставить("ВерсияПлатформы", "8.3.17.1851");
		НастройкиВыполнения.Вставить("ИспользоватьРежимАгента", Ложь);
		
		// готовим объект
		ПодключитьСценарий(".\src\extractsource.os", "ТипВыгрузкаИПоискИсходников");
		ОбъектВыгрузкиИПоиска = Новый ТипВыгрузкаИПоискИсходников(НастройкиВыполнения);
		ОбъектВыгрузкиИПоиска.Инициализация();

		// выполнение операций
		Результат = ОбъектВыгрузкиИПоиска.ВыгрузитьИНайтиИсходники();
	Исключение
		ВременныйКаталог = Неопределено;
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

	// читаем образец результата
	ОбразецРезультата = Новый Массив;

	// проверка результатов
	Если Не ОбщиеМетоды.КоллекцииСовпадают(Результат, ОбразецРезультата) Тогда
		ТекстОшибки = "Коллекция результата отлична от образца (временный каталог: " + ВременныйКаталог + ")";
		ОбщиеМетоды.ЗаписатьФайлJSON(ВременныйКаталог + "\incorrect_result.json", Результат);
		ОбщиеМетоды.ЗаписатьФайлJSON(ВременныйКаталог + "\example_result.json", ОбразецРезультата);
		ВременныйКаталог = Неопределено;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеИсходниковИзПутиККаталогу() Экспорт
	Попытка
		// подготовка тестовых данных
		СоздатьКаталог(ВременныйКаталог + "\testcatalog2");
		КопироватьФайл(ТекущийСценарий().Каталог + "\fixtures\testfile1.bsl", ВременныйКаталог + "\testcatalog2\testfile2.bsl");
		КопироватьФайл(ТекущийСценарий().Каталог + "\fixtures\testfile1.bsl", ВременныйКаталог + "\testcatalog2\testfile3.txt");
		СоздатьКаталог(ВременныйКаталог + "\testcatalog2\testcatalog21");
		КопироватьФайл(ТекущийСценарий().Каталог + "\fixtures\testfile1.bsl", ВременныйКаталог + "\testcatalog2\testcatalog21\testfile4.os");

		// готовим настройки
		НастройкиВыполнения = Новый Соответствие;
		НастройкиВыполнения.Вставить("ВременныйКаталог", ВременныйКаталог);
		
		ОписаниеИсходника = Новый Соответствие;
		ОписаниеИсходника.Вставить("ТипИсходника", "src");
		ОписаниеИсходника.Вставить("Source", ВременныйКаталог + "\testcatalog2");
		НастройкиВыполнения.Вставить("ОписаниеИсходника", ОписаниеИсходника);

		ФорматыФайловДляАнализа = Новый Массив;
		ФорматыФайловДляАнализа.Добавить("*.bsl");
		ФорматыФайловДляАнализа.Добавить("*.os");
		НастройкиВыполнения.Вставить("ФорматыФайловДляАнализа", ФорматыФайловДляАнализа);

		НастройкиВыполнения.Вставить("ФайлОбработкиВыгрузкиДопОбработок", ".\tools\savehandlers.epf");
		НастройкиВыполнения.Вставить("ВерсияПлатформы", "8.3.17.1851");
		НастройкиВыполнения.Вставить("ИспользоватьРежимАгента", Ложь);
		
		// готовим объект
		ПодключитьСценарий(".\src\extractsource.os", "ТипВыгрузкаИПоискИсходников");
		ОбъектВыгрузкиИПоиска = Новый ТипВыгрузкаИПоискИсходников(НастройкиВыполнения);
		ОбъектВыгрузкиИПоиска.Инициализация();

		// выполнение операций
		Результат = ОбъектВыгрузкиИПоиска.ВыгрузитьИНайтиИсходники();
	Исключение
		ВременныйКаталог = Неопределено;
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

	// читаем образец результата
	ОбразецРезультата = Новый Массив;
	ОписаниеФайла = Новый Соответствие;
	ОписаниеФайла.Вставить("ВременныйКаталог", "");
	ОписаниеФайла.Вставить("ИмяФайлаДоВременногоКаталога", ВременныйКаталог + "\testcatalog2\testfile2.bsl");
	ОбразецРезультата.Добавить(ОписаниеФайла);
	ОписаниеФайла = Новый Соответствие;
	ОписаниеФайла.Вставить("ВременныйКаталог", "");
	ОписаниеФайла.Вставить("ИмяФайлаДоВременногоКаталога", ВременныйКаталог + "\testcatalog2\testcatalog21\testfile4.os");
	ОбразецРезультата.Добавить(ОписаниеФайла);

	// проверка результатов
	Если Не ОбщиеМетоды.КоллекцииСовпадают(Результат, ОбразецРезультата) Тогда
		ТекстОшибки = "Коллекция результата отлична от образца (временный каталог: " + ВременныйКаталог + ")";
		ВременныйКаталог = Неопределено;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Процедура ТестДолжен_ПроверитьПолучениеИсходниковОбработокИзБазы() Экспорт
	// подготовка тестовых данных
	Попытка
		КаталогВременнойИБ = ВременныйКаталог + "\testbd";
		СоздатьКаталог(КаталогВременнойИБ);
		
		ЧтениеАрхива = Новый ЧтениеZipФайла(ТекущийСценарий().Каталог + "\fixtures\testbd.zip");
		ЧтениеАрхива.ИзвлечьВсе(КаталогВременнойИБ, РежимВосстановленияПутейФайловZIP.Восстанавливать);
		ЧтениеАрхива.Закрыть();
		ЧтениеАрхива = Неопределено;

		// готовим настройки
		НастройкиВыполнения = Новый Соответствие;
		НастройкиВыполнения.Вставить("ВременныйКаталог", ВременныйКаталог);
		НастройкиВыполнения.Вставить("ИдентификаторПроцесса", Лев(Строка(Новый УникальныйИдентификатор()), 8));
		
		ОписаниеИсходника = Новый Соответствие;
		ОписаниеИсходника.Вставить("ТипИсходника", "ib");
		ОписаниеИсходника.Вставить("Source", "/F""" + КаталогВременнойИБ + """");
		ОписаниеИсходника.Вставить("User", "admin");
		ОписаниеИсходника.Вставить("Pwd", "admin");
		НастройкиВыполнения.Вставить("ОписаниеИсходника", ОписаниеИсходника);

		ФорматыФайловДляАнализа = Новый Массив;
		ФорматыФайловДляАнализа.Добавить("*.bsl");
		ФорматыФайловДляАнализа.Добавить("*.os");
		НастройкиВыполнения.Вставить("ФорматыФайловДляАнализа", ФорматыФайловДляАнализа);

		НастройкиВыполнения.Вставить("ФайлОбработкиВыгрузкиДопОбработок", ".\tools\savehandlers.epf");
		НастройкиВыполнения.Вставить("ВерсияПлатформы", "8.3.17.1851");
		НастройкиВыполнения.Вставить("ИспользоватьРежимАгента", Ложь);
		
		// готовим объект
		ПодключитьСценарий(".\src\extractsource.os", "ТипВыгрузкаИПоискИсходников");
		ОбъектВыгрузкиИПоиска = Новый ТипВыгрузкаИПоискИсходников(НастройкиВыполнения);
		ОбъектВыгрузкиИПоиска.Инициализация();

		// выполнение операций
		Результат = ОбъектВыгрузкиИПоиска.ВыгрузитьИНайтиИсходники();
	Исключение
		ВременныйКаталог = Неопределено;
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

	// читаем образец результата
	ОбразецРезультата = Новый Массив;
	ОписаниеФайла = Новый Соответствие;
	ОписаниеФайла.Вставить("ВременныйКаталог", ВременныйКаталог + "\source_" + НастройкиВыполнения.Получить("ИдентификаторПроцесса"));
	ОписаниеФайла.Вставить("ИмяФайлаДоВременногоКаталога", "\src\fb287148-af61-11ec-9690-0c9a3c9f09dd\savehandlers\Forms\Форма\Ext\Form\Module.bsl");
	ОбразецРезультата.Добавить(ОписаниеФайла);

	// проверка результатов
	Если Не ОбщиеМетоды.КоллекцииСовпадают(Результат, ОбразецРезультата) Тогда
		ТекстОшибки = "Коллекция результата отлична от образца (временный каталог: " + ВременныйКаталог + ")";
		ОбщиеМетоды.ЗаписатьФайлJSON(ВременныйКаталог + "\incorrect_result.json", Результат);
		ОбщиеМетоды.ЗаписатьФайлJSON(ВременныйКаталог + "\example_result.json", ОбразецРезультата);
		ВременныйКаталог = Неопределено;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

КонецПроцедуры

Процедура _ПроверитьПолучениеИсходниковИзХранилищаКонфигурации(НомерВерсииХранилища = Неопределено) Экспорт
	// подготовка тестовых данных
	Попытка
		КаталогВременнойИБ = ВременныйКаталог + "\testbd";
		СоздатьКаталог(КаталогВременнойИБ);

		КаталогХранилища = ВременныйКаталог + "\testconfrepo";
		СоздатьКаталог(КаталогХранилища);
		
		ЧтениеАрхива = Новый ЧтениеZipФайла(ТекущийСценарий().Каталог + "\fixtures\testconfrepo.zip");
		ЧтениеАрхива.ИзвлечьВсе(КаталогХранилища, РежимВосстановленияПутейФайловZIP.Восстанавливать);
		ЧтениеАрхива.Закрыть();
		ЧтениеАрхива = Неопределено;

		// готовим настройки
		НастройкиВыполнения = Новый Соответствие;
		НастройкиВыполнения.Вставить("ВременныйКаталог", ВременныйКаталог);
		НастройкиВыполнения.Вставить("ИдентификаторПроцесса", Лев(Строка(Новый УникальныйИдентификатор()), 8));
		
		ОписаниеИсходника = Новый Соответствие;
		ОписаниеИсходника.Вставить("ТипИсходника", "repocf");
		ОписаниеИсходника.Вставить("Source", """" + КаталогХранилища + """");
		ОписаниеИсходника.Вставить("User", "admin");
		ОписаниеИсходника.Вставить("Pwd", "admin");
		НастройкиВыполнения.Вставить("ОписаниеИсходника", ОписаниеИсходника);

		Если НомерВерсииХранилища <> Неопределено Тогда
			НастройкиВыполнения.Вставить("НомерВерсииХранилища", НомерВерсииХранилища);
		КонецЕсли;

		ФорматыФайловДляАнализа = Новый Массив;
		ФорматыФайловДляАнализа.Добавить("*.bsl");
		ФорматыФайловДляАнализа.Добавить("*.os");
		НастройкиВыполнения.Вставить("ФорматыФайловДляАнализа", ФорматыФайловДляАнализа);

		НастройкиВыполнения.Вставить("ВерсияПлатформы", "8.3.17.1851");
		НастройкиВыполнения.Вставить("ИспользоватьРежимАгента", Ложь);
		
		// готовим объект
		ПодключитьСценарий(".\src\extractsource.os", "ТипВыгрузкаИПоискИсходников");
		ОбъектВыгрузкиИПоиска = Новый ТипВыгрузкаИПоискИсходников(НастройкиВыполнения);
		ОбъектВыгрузкиИПоиска.Инициализация();

		// выполнение операций
		Результат = ОбъектВыгрузкиИПоиска.ВыгрузитьИНайтиИсходники();
	Исключение
		ВременныйКаталог = Неопределено;
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

	// читаем образец результата
	ОбразецРезультата = Новый Массив;
	ОписаниеФайла = Новый Соответствие;
	ОписаниеФайла.Вставить("ВременныйКаталог", ВременныйКаталог + "\source_" + НастройкиВыполнения.Получить("ИдентификаторПроцесса"));
	ОписаниеФайла.Вставить("ИмяФайлаДоВременногоКаталога", "\src\fb287148-af61-11ec-9690-0c9a3c9f09dd\savehandlers\Forms\Форма\Ext\Form\Module.bsl");
	ОбразецРезультата.Добавить(ОписаниеФайла);

	// проверка результатов
	Если Не ОбщиеМетоды.КоллекцииСовпадают(Результат, ОбразецРезультата) Тогда
		ТекстОшибки = "Коллекция результата отлична от образца (временный каталог: " + ВременныйКаталог + ")";
		ОбщиеМетоды.ЗаписатьФайлJSON(ВременныйКаталог + "\incorrect_result.json", Результат);
		ОбщиеМетоды.ЗаписатьФайлJSON(ВременныйКаталог + "\example_result.json", ОбразецРезультата);
		ВременныйКаталог = Неопределено;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеИсходниковИзХранилищаКонфигурации() Экспорт
	_ПроверитьПолучениеИсходниковИзХранилищаКонфигурации();
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеИсходниковИзХранилищаКонфигурацииВерсии1() Экспорт
	_ПроверитьПолучениеИсходниковИзХранилищаКонфигурации(1);
КонецПроцедуры

ОбщиеМетоды = ЗагрузитьСценарий("./src/commonmethods.os");