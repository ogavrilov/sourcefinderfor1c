#Использовать logos

Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт
	Если СтрНайти(Сообщение, "$NOFORMAT$") > 0 Тогда
		Возврат СтрЗаменить(Сообщение, "$NOFORMAT$", "");
	Иначе
    	Возврат СтрШаблон("[%1]: %2 - %3", ТекущаяДата(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);
	КонецЕсли;
КонецФункции

Функция КопироватьКоллекцию(ИсходнаяКоллекция) Экспорт
	Если ТипЗнч(ИсходнаяКоллекция) = Тип("Массив") Тогда
		Результат = Новый Массив;
		ТипМассив = Истина;
	ИначеЕсли ТипЗнч(ИсходнаяКоллекция) = Тип("Структура") Тогда
		Результат = Новый Структура;
		ТипМассив = Ложь;
	ИначеЕсли ТипЗнч(ИсходнаяКоллекция) = Тип("Соответствие") Тогда
		Результат = Новый Соответствие;
		ТипМассив = Ложь;
	Иначе
		Возврат ИсходнаяКоллекция;
	КонецЕсли;
	Для Каждого ЭлементКоллекции Из ИсходнаяКоллекция Цикл
		Если ТипМассив Тогда
			Результат.Добавить(КопироватьКоллекцию(ЭлементКоллекции));
		Иначе
			Результат.Вставить(ЭлементКоллекции.Ключ, КопироватьКоллекцию(ЭлементКоллекции.Значение));
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

// предполагается, что коллекции будут массивами или соответствиями
Функция КоллекцииСовпадают(Коллекция1, Коллекция2) Экспорт
	ТипЗнчСоответствия = ТипЗнч(Коллекция1);
	Если ТипЗнчСоответствия <> ТипЗнч(Коллекция2) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Коллекция1.Количество() <> Коллекция2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнчСоответствия = Тип("Соответствие") Тогда
		Для Каждого ЭлементКоллекции1 Из Коллекция1 Цикл
			Если ТипЗнч(ЭлементКоллекции1.Значение) = Тип("Соответствие") ИЛИ ТипЗнч(ЭлементКоллекции1.Значение) = Тип("Массив") Тогда
				Если Не КоллекцииСовпадают(ЭлементКоллекции1.Значение, Коллекция2.Получить(ЭлементКоллекции1.Ключ)) Тогда
					Возврат Ложь;
				КонецЕсли;
				Продолжить;
			КонецЕсли;

			Значение2 = Коллекция2.Получить(ЭлементКоллекции1.Ключ);
			Если ЭлементКоллекции1.Значение <> Значение2 Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	
	Иначе
		Коллекция11 = КопироватьКоллекцию(Коллекция1);
		Коллекция22 = КопироватьКоллекцию(Коллекция2);
		Пока Коллекция11.Количество() > 0 Цикл
			// ищем такой же элемент во второй коллекции
			ЭлементКоллекции11 = Коллекция11.Получить(0);
			Если ТипЗнч(ЭлементКоллекции11) = Тип("Соответствие") ИЛИ ТипЗнч(ЭлементКоллекции11) = Тип("Массив") Тогда 
				НайденныйИндексКоллекции22 = Неопределено;
				ИндексКоллекции22 = 0;
				Пока ИндексКоллекции22 < Коллекция22.Количество() Цикл
					ЭлементыСовпадают = КоллекцииСовпадают(ЭлементКоллекции11, Коллекция22.Получить(ИндексКоллекции22));
					Если ЭлементыСовпадают Тогда
						НайденныйИндексКоллекции22 = ИндексКоллекции22;
						Прервать;
					Иначе
						ИндексКоллекции22 = ИндексКоллекции22 + 1;
					КонецЕсли;
				КонецЦикла;
			Иначе
				НайденныйИндексКоллекции22 = Коллекция22.Найти(ЭлементКоллекции11);
			КонецЕсли;
			Если НайденныйИндексКоллекции22 = Неопределено Тогда
				Возврат Ложь;
			Иначе
				Коллекция22.Удалить(НайденныйИндексКоллекции22);
				Коллекция11.Удалить(0);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция ПрочитатьФайлJSON(ИмяФайлаНастроек) Экспорт
	Результат = Неопределено;
	Попытка
		ЧтениеНастроек = Новый ЧтениеJSON;
		ЧтениеНастроек.ОткрытьФайл(ИмяФайлаНастроек, КодировкаТекста.UTF8);
		Результат = ПрочитатьJSON(ЧтениеНастроек, Истина);
		ЧтениеНастроек.Закрыть();
	Исключение
		Результат = ОписаниеОшибки();
	КонецПопытки;
	Возврат Результат;
КонецФункции

Процедура ЗаписатьФайлJSON(ИмяФайлаНастроек, СтруктураДанныхНастроек) Экспорт
	ЗаписьНастроек = Новый ЗаписьJSON;
	ЗаписьНастроек.ОткрытьФайл(ИмяФайлаНастроек);
	ЗаписатьJSON(ЗаписьНастроек, СтруктураДанныхНастроек);
	ЗаписьНастроек.Закрыть();
КонецПроцедуры

Функция ПрочитатьТекстовыйФайл(ИмяФайла) Экспорт
	ЧтениеТекстовогоФайла = Новый ЧтениеТекста(ИмяФайла);
	Результат = ЧтениеТекстовогоФайла.Прочитать();
	ЧтениеТекстовогоФайла.Закрыть();
	Возврат Результат;
КонецФункции

Процедура УдалитьФайлыРекурсивно(ПутьКФайлу) Экспорт
	ОбъектФайла = Новый Файл(ПутьКФайлу);
	Если ОбъектФайла.ЭтоКаталог() Тогда
		НайденныеФайлы = НайтиФайлы(ПутьКФайлу + "/", "*", Ложь);
		Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
			УдалитьФайлыРекурсивно(НайденныйФайл.ПолноеИмя);
		КонецЦикла;
	КонецЕсли;
	УдалитьФайлы(ПутьКФайлу);
КонецПроцедуры