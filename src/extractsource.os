#Использовать v8runner
#Использовать logos

Перем ВременныйКаталог;
Перем ИдентификаторПроцесса;
Перем ОписаниеИсходника;
Перем ФорматыФайловДляАнализа;
Перем ФайлОбработкиВыгрузкиДопОбработок;
Перем ФайлРезультатаПроцесса;
Перем Лог;
Перем ТипИсходника;
Перем Source;
Перем User;
Перем Pwd;
Перем НомерВерсииХранилища;
Перем ДопустимыеТипыИсходников;
Перем СтрокаДопустимыхТиповИсходников;
Перем ДанныеКорректны;
Перем ВерсияПлатформы;
Перем ИспользоватьРежимАгента;
Перем ОбщиеМетоды;
Перем ПутьКФайлуПустойКонфигурацииРасширения;

Процедура ПриСозданииОбъекта(НастройкиВыполнения = Неопределено)
	// обработка настроек
	Если НастройкиВыполнения = Неопределено Тогда
		Если АргументыКоманднойСтроки.Количество() > 0 Тогда
			ФайлНастроекВыполнения = АргументыКоманднойСтроки[0];
		Иначе
			ФайлНастроекВыполнения = СтрЗаменить(ТекущийСценарий().Источник, ".os", ".json");
		КонецЕсли;
		Если НайтиФайлы(ФайлНастроекВыполнения).Количество() > 0 Тогда
			НастройкиВыполнения = ОбщиеМетоды.ПрочитатьФайлJSON(ФайлНастроекВыполнения);
		КонецЕсли;
	КонецЕсли;

	УстановитьНастройкиВыполнения(НастройкиВыполнения);
КонецПроцедуры

Процедура УстановитьНастройкиВыполнения(НастройкиВыполнения, ИменаНастроек = Неопределено) Экспорт
	Если ИменаНастроек = Неопределено Тогда
		ИменаНастроек = "ВременныйКаталог, ИдентификаторПроцесса, ОписаниеИсходника, ФорматыФайловДляАнализа, ФайлОбработкиВыгрузкиДопОбработок, ФайлРезультатаПроцесса, Лог, ВерсияПлатформы, ИспользоватьРежимАгента";
	КонецЕсли;
	СтруктураИменНастроек = Новый Структура(ИменаНастроек);
	СтруктураНастроек = Новый Структура;
	Для Каждого ЭлементСтруктурыИменНастроек Из СтруктураИменНастроек Цикл
		Выполнить(ЭлементСтруктурыИменНастроек.Ключ + " = НастройкиВыполнения.Получить(ЭлементСтруктурыИменНастроек.Ключ);");
	КонецЦикла;
КонецПроцедуры

Процедура Инициализация() Экспорт
	// ИдентификаторПроцесса
	Если Не ЗначениеЗаполнено(ИдентификаторПроцесса) Тогда
		ИдентификаторПроцесса = Лев(Строка(Новый УникальныйИдентификатор()), 8);
	КонецЕсли;
	// Временный каталог
	Если Не ЗначениеЗаполнено(ВременныйКаталог) Тогда
		ВременныйКаталог = ТекущийСценарий().Каталог + "\" + ИдентификаторПроцесса;
	КонецЕсли;
	Если НайтиФайлы(ВременныйКаталог).Количество() = 0 Тогда
		СоздатьКаталог(ВременныйКаталог);
	КонецЕсли;
	// Лог
	Если Лог = Неопределено Тогда
		Лог = Логирование.ПолучитьЛог("oscript.app.extractsource");
		Лог.УстановитьРаскладку(ОбщиеМетоды);
	КонецЕсли;

	// проверка параметров
	ДанныеКорректны = Истина;
	Если ОписаниеИсходника = Неопределено ИЛИ ТипЗнч(ОписаниеИсходника) <> Тип("Соответствие") Тогда
		ДанныеКорректны = Ложь;
		Лог.КритичнаяОшибка("Параметр ""ОписаниеИсходника"" отсутствует или не является соответствием/структурой.");
	Иначе
		ТипИсходника = ОписаниеИсходника.Получить("ТипИсходника");
		Если ТипИсходника = Неопределено Тогда
			ДанныеКорректны = Ложь;
			Лог.КритичнаяОшибка("Параметр ""ТипИсходника"" отсутствует или не является соответствием/структурой.");
		КонецЕсли;
		Если ДопустимыеТипыИсходников.Получить(ТипИсходника) = Неопределено Тогда
			ДанныеКорректны = Ложь;
			Лог.КритичнаяОшибка("Значение параметра ""ТипИсходника"" отсутствует в списке допустимых типов (" + СтрокаДопустимыхТиповИсходников + ").");
		КонецЕсли;
		Source = ОписаниеИсходника.Получить("Source");
		Если Не ЗначениеЗаполнено(Source) Тогда
			ДанныеКорректны = Ложь;
			Лог.КритичнаяОшибка("Параметр ""Source"" отсутствует или не заполнен.");
		КонецЕсли;
		User = ОписаниеИсходника.Получить("User");
		Если Не ЗначениеЗаполнено(User) И (ТипИсходника = "repocf" ИЛИ ТипИсходника = "repocfe") Тогда
			ДанныеКорректны = Ложь;
			Лог.КритичнаяОшибка("Параметр ""Usr"" отсутствует или не заполнен. Для типов repocf и repocfe этот параметр обязателен");
		КонецЕсли;
		Pwd = ОписаниеИсходника.Получить("Pwd");
		Если Не ЗначениеЗаполнено(Pwd) Тогда
			Pwd = "";
		КонецЕсли;
		// НомерВерсииХранилища
		НомерВерсииХранилища = ОписаниеИсходника.Получить("НомерВерсииХранилища");
		Если Не ЗначениеЗаполнено(НомерВерсииХранилища) Тогда
			НомерВерсииХранилища = 0;
		КонецЕсли;
	КонецЕсли;
	Если Не ДанныеКорректны Тогда
		Лог.КритичнаяОшибка("Операции завершены.");
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьОбъектУправленияКонфигуратором()
	Попытка
		Конфигуратор = Новый УправлениеКонфигуратором();
		Если ЗначениеЗаполнено(ВерсияПлатформы) Тогда
			Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
		КонецЕсли;
	Исключение
		Лог.КритичнаяОшибка("Не удалось инициализировать объект управления конфигуратором: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	Возврат Конфигуратор;
КонецФункции

Функция СоздатьКаталогВременнойИБ(РодительскийКаталог, ИмяНовогоКаталога)
	КаталогВременнойИБ = РодительскийКаталог + "\" + ИмяНовогоКаталога;
	Если НайтиФайлы(КаталогВременнойИБ).Количество() > 0 Тогда
		Лог.Ошибка("Уже имеется каталог для временной ИБ: " + КаталогВременнойИБ);
		Возврат КаталогВременнойИБ;
	КонецЕсли;
	Попытка
		СоздатьКаталог(КаталогВременнойИБ);
	Исключение
		Лог.КритичнаяОшибка("Не удалось создать каталог для временной ИБ: " + КаталогВременнойИБ);
		Возврат Неопределено;
	КонецПопытки;
	Возврат КаталогВременнойИБ;
КонецФункции

Процедура УдалитьКаталогВременнойИБ(ПутьККаталогу)
	Попытка
		УдалитьФайлы(ПутьККаталогу + "\", "*");
		УдалитьФайлы(ПутьККаталогу);
	Исключение
		Лог.Ошибка("Не удалось удалить каталог для временной ИБ: " + ПутьККаталогу);
	КонецПопытки;
КонецПроцедуры

Функция ВыгрузитьКонфигурациюИБВФайлы(Конфигуратор, КаталогВыгрузки, ЭтоРасширение = Ложь) 
	Попытка
		Если ЭтоРасширение Тогда
			Конфигуратор.ВыгрузитьРасширениеВФайлы(КаталогВыгрузки, "Расширение1");
		Иначе
			Конфигуратор.ВыгрузитьКонфигурациюВФайлы(КаталогВыгрузки);
		КонецЕсли;
	Исключение
		ТекстОшибки = "Не удалось выгрузить конфигурацию (" + Source + ") в файлы во временный каталог: " + КаталогВыгрузки;
		Если ЭтоРасширение Тогда
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "конфигурацию", "расширение конфигурации");
		КонецЕсли;
		Лог.КритичнаяОшибка(ТекстОшибки);
		Конфигуратор.УдалитьВременнуюБазу();
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

Функция ВыгрузитьФайлКонфигурации(ВременныйКаталогИсходников, ЭтоРасширение = Ложь)
	// создадим каталог временной ИБ
	КаталогВременнойИБ = СоздатьКаталогВременнойИБ(ВременныйКаталогИсходников, "tempdb");
	Если КаталогВременнойИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// инициализируем объект управления конфигуратором
	Конфигуратор = ПолучитьОбъектУправленияКонфигуратором();
	Если Конфигуратор = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Создадим временную ИБ
	Попытка
		Конфигуратор.СоздатьФайловуюБазу(КаталогВременнойИБ);
		Конфигуратор.УстановитьКонтекст("/F""" + КаталогВременнойИБ + """", "", "");
	Исключение
		Лог.КритичнаяОшибка("Не удалось создать временную ИБ: " + КаталогВременнойИБ);
		Конфигуратор.УдалитьВременнуюБазу();
		Возврат Ложь;
	КонецПопытки;

	// загрузим файл конфигурации во временную ИБ
	Попытка
		Если ЭтоРасширение Тогда
			Конфигуратор.ЗагрузитьРасширениеИзФайла(Source, "Расширение1");
		Иначе
			Конфигуратор.ЗагрузитьКонфигурациюИзФайла(Source);
		КонецЕсли;
	Исключение
		ТекстОшибки = "Не удалось загрузить конфигурацию (" + Source + ") во временную ИБ: " + КаталогВременнойИБ;
		Если ЭтоРасширение Тогда
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "конфигурацию", "расширение конфигурации");
		КонецЕсли;
		Лог.КритичнаяОшибка(ТекстОшибки);
		Лог.КритичнаяОшибка(ОписаниеОшибки());
		Конфигуратор.УдалитьВременнуюБазу();
		Возврат Ложь;
	КонецПопытки;
	
	// создадим каталог исходников
	КаталогВыгрузки = СоздатьКаталогВременнойИБ(ВременныйКаталогИсходников, "src");
	Если КаталогВыгрузки = Неопределено Тогда
		Конфигуратор.УдалитьВременнуюБазу();
		Возврат Ложь;
	КонецЕсли;

	// выгрузим конфигурацию временной ИБ в файлы
	Если Не ВыгрузитьКонфигурациюИБВФайлы(Конфигуратор, КаталогВыгрузки, ЭтоРасширение) Тогда
		Конфигуратор.УдалитьВременнуюБазу();
		Возврат Ложь;
	КонецЕсли;
	
	// удалим каталог временной ИБ
	УдалитьКаталогВременнойИБ(КаталогВременнойИБ);

	Конфигуратор.УдалитьВременнуюБазу();
	Возврат Истина;
КонецФункции

Функция ВыгрузитьКонфигурациюХранилища(ВременныйКаталогИсходников)
	// создадим каталог временной ИБ
	КаталогВременнойИБ = СоздатьКаталогВременнойИБ(ВременныйКаталогИсходников, "tempdb");
	Если КаталогВременнойИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// инициализируем объект управления конфигуратором
	Конфигуратор = ПолучитьОбъектУправленияКонфигуратором();
	Если Конфигуратор = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Создадим временную ИБ
	Попытка
		Конфигуратор.СоздатьФайловуюБазу(КаталогВременнойИБ);
		Конфигуратор.УстановитьКонтекст("/F""" + КаталогВременнойИБ + """", "", "");
	Исключение
		Лог.КритичнаяОшибка("Не удалось создать временную ИБ: " + КаталогВременнойИБ);
		Конфигуратор.УдалитьВременнуюБазу();
		Возврат Ложь;
	КонецПопытки;

	// загрузим конфигурацию из хранилища во временную ИБ
	Попытка
		Конфигуратор.ЗагрузитьКонфигурациюИзХранилища(Source, User, Pwd, НомерВерсииХранилища);
	Исключение
		Лог.КритичнаяОшибка("Не удалось получить конфигурацию из хранилища (" + Source + ") во временную ИБ: " + КаталогВременнойИБ);
		Конфигуратор.УдалитьВременнуюБазу();
		Возврат Ложь;
	КонецПопытки;
	
	// создадим каталог исходников
	КаталогВыгрузки = СоздатьКаталогВременнойИБ(ВременныйКаталогИсходников, "src");
	Если КаталогВыгрузки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// выгрузим конфигурацию временной ИБ в файлы
	Если Не ВыгрузитьКонфигурациюИБВФайлы(Конфигуратор, КаталогВыгрузки) Тогда
		Конфигуратор.УдалитьВременнуюБазу();
		Возврат Ложь;
	КонецЕсли;
	
	// удалим каталог временной ИБ
	УдалитьКаталогВременнойИБ(КаталогВременнойИБ);

	Конфигуратор.УдалитьВременнуюБазу();
	Возврат Истина;
КонецФункции

Функция ВыгрузитьКонфигурациюРасширенияХранилища(ВременныйКаталогИсходников)
	// создадим каталог временной ИБ
	КаталогВременнойИБ = СоздатьКаталогВременнойИБ(ВременныйКаталогИсходников, "tempdb");
	Если КаталогВременнойИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// инициализируем объект управления конфигуратором
	Конфигуратор = ПолучитьОбъектУправленияКонфигуратором();
	Если Конфигуратор = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Создадим временную ИБ
	Попытка
		Конфигуратор.СоздатьФайловуюБазу(КаталогВременнойИБ);
		Конфигуратор.УстановитьКонтекст("/F""" + КаталогВременнойИБ + """", "", "");
	Исключение
		Лог.КритичнаяОшибка("Не удалось создать временную ИБ: " + КаталогВременнойИБ);
		Конфигуратор.УдалитьВременнуюБазу();
		Возврат Ложь;
	КонецПопытки;

	// загрузим конфигурацию пустого расширения во временную ИБ
	Попытка
		Конфигуратор.ЗагрузитьРасширениеИзФайла(ПутьКФайлуПустойКонфигурацииРасширения, "Расширение1");
	Исключение
		Лог.КритичнаяОшибка("Не удалось загрузить пустую конфигурацию расширения из файла (" + ПутьКФайлуПустойКонфигурацииРасширения + ") во временную ИБ: " + КаталогВременнойИБ);
		Конфигуратор.УдалитьВременнуюБазу();
		Возврат Ложь;
	КонецПопытки;

	// загрузим конфигурацию из хранилища во временную ИБ
	Попытка
		ПараметрыЗапуска = Новый Массив;
		ПараметрыЗапуска.Добавить("DESIGNER");
		ПараметрыЗапуска.Добавить("/F""" + КаталогВременнойИБ + """");
		ПараметрыЗапуска.Добавить("/DisableStartupMessages");
		ПараметрыЗапуска.Добавить("/DisableStartupDialogs");
		ПараметрыЗапуска.Добавить("/ConfigurationRepositoryF """ + Source + """");
		ПараметрыЗапуска.Добавить("/ConfigurationRepositoryN """ + User + """");
		Если Не ПустаяСтрока(Pwd) Тогда
			ПараметрыЗапуска.Добавить("/ConfigurationRepositoryP """ + Pwd + """");
		КонецЕсли;	
		ПараметрыЗапуска.Добавить("/ConfigurationRepositoryUpdateCfg");
		// ВАЖНО!!!! Флаг <-v> должен быть обязательно после команды ConfigurationRepositoryUpdateCfg
		// Если это нарушить, то всегда получается последняя версия конфигурации
		Если ЗначениеЗаполнено(НомерВерсииХранилища) Тогда
			ПараметрыЗапуска.Добавить("-v " + НомерВерсииХранилища);
		КонецЕсли;
		ПараметрыЗапуска.Добавить("-force");

		ПараметрыЗапуска.Добавить("-Extension Расширение1");
		
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
		Лог.КритичнаяОшибка("Не удалось получить конфигурацию расширения из хранилища (" + Source + ") во временную ИБ: " + КаталогВременнойИБ);
		Конфигуратор.УдалитьВременнуюБазу();
		Возврат Ложь;
	КонецПопытки;
	
	// создадим каталог исходников
	КаталогВыгрузки = СоздатьКаталогВременнойИБ(ВременныйКаталогИсходников, "src");
	Если КаталогВыгрузки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// выгрузим конфигурацию временной ИБ в файлы
	Если Не ВыгрузитьКонфигурациюИБВФайлы(Конфигуратор, КаталогВыгрузки, Истина) Тогда
		Конфигуратор.УдалитьВременнуюБазу();
		Возврат Ложь;
	КонецЕсли;
	
	// удалим каталог временной ИБ
	УдалитьКаталогВременнойИБ(КаталогВременнойИБ);

	Конфигуратор.УдалитьВременнуюБазу();
	Возврат Истина;
КонецФункции

Функция ВыгрузитьОбработкиБазы(ВременныйКаталогИсходников)
	// инициализируем объект управления конфигуратором
	Конфигуратор = ПолучитьОбъектУправленияКонфигуратором();
	Если Конфигуратор = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// выгрузим обработки базы в файлы
	ПараметрыКоманды = Новый Массив;
	ПараметрыКоманды.Добавить("ENTERPRISE");
	ПараметрыКоманды.Добавить(Source);
	Если ЗначениеЗаполнено(User) Тогда
		ПараметрыКоманды.Добавить("/N""" + User + """");
	КонецЕсли;
	Если ЗначениеЗаполнено(Pwd) Тогда
		ПараметрыКоманды.Добавить("/P""" + Pwd + """");
	КонецЕсли;
	ПараметрыКоманды.Добавить("/Execute");
	ПараметрыКоманды.Добавить("""" + ФайлОбработкиВыгрузкиДопОбработок + """");
	ПараметрыКоманды.Добавить("/CКаталогВыгрузки=""" + ВременныйКаталогИсходников + """");
	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыКоманды);
	Исключение
		Лог.КритичнаяОшибка("Не удалось выгрузить обработки из базы: " + ОписаниеОшибки());
		Конфигуратор.УдалитьВременнуюБазу();
		Возврат Ложь;
	КонецПопытки;

	// создадим подкаталоги для исходников (если создали - добавим файл в список обработки)
	ВременныйКаталогИсходниковОбработок = СоздатьКаталогВременнойИБ(ВременныйКаталогИсходников, "src");
	Если ВременныйКаталогИсходниковОбработок = Неопределено Тогда
		Конфигуратор.УдалитьВременнуюБазу();
		Возврат Ложь;
	КонецЕсли;
	ФайлыДляОбработки = Новый Соответствие;
	ФайлыОбработок = НайтиФайлы(ВременныйКаталогИсходников, "*.epf");
	Для Каждого ФайлОбработки Из ФайлыОбработок Цикл
		ТекущийВременныйКаталогИсходниковОбработок = СоздатьКаталогВременнойИБ(ВременныйКаталогИсходниковОбработок, ФайлОбработки.ИмяБезРасширения);
		Если ТекущийВременныйКаталогИсходниковОбработок <> Неопределено Тогда
			ФайлыДляОбработки.Вставить(ФайлОбработки.ПолноеИмя, ТекущийВременныйКаталогИсходниковОбработок);
		КонецЕсли;
	КонецЦикла;
	ФайлыОтчетов = НайтиФайлы(ВременныйКаталогИсходников, "*.erf");
	Для Каждого ФайлОбработки Из ФайлыОтчетов Цикл
		ТекущийВременныйКаталогИсходниковОбработок = СоздатьКаталогВременнойИБ(ВременныйКаталогИсходниковОбработок, ФайлОбработки.ИмяБезРасширения);
		Если ТекущийВременныйКаталогИсходниковОбработок <> Неопределено Тогда
			ФайлыДляОбработки.Вставить(ФайлОбработки.ПолноеИмя, ТекущийВременныйКаталогИсходниковОбработок);
		КонецЕсли;
	КонецЦикла;

	// выгружаем обработки в исходники
	// TODO: обработка параметра ИспользоватьРежимАгента
	Для Каждого ЭлементСоответствияФайла Из ФайлыДляОбработки Цикл
		ПараметрыКоманды = Новый Массив;
		ПараметрыКоманды.Добавить("DESIGNER");
		ПараметрыКоманды.Добавить(Source);
		Если ЗначениеЗаполнено(User) Тогда
			ПараметрыКоманды.Добавить("/N""" + User + """");
		КонецЕсли;
		Если ЗначениеЗаполнено(Pwd) Тогда
			ПараметрыКоманды.Добавить("/P""" + Pwd + """");
		КонецЕсли;
		ПараметрыКоманды.Добавить("/DumpExternalDataProcessorOrReportToFiles");
		ПараметрыКоманды.Добавить("""" + ЭлементСоответствияФайла.Значение + """");
		ПараметрыКоманды.Добавить("""" + ЭлементСоответствияФайла.Ключ + """");
		Попытка
			Конфигуратор.ВыполнитьКоманду(ПараметрыКоманды);
		Исключение
			Лог.КритичнаяОшибка("Не удалось выгрузить в файлы обработку (идентификатор " + ЭлементСоответствияФайла.Ключ + "): " + ОписаниеОшибки());
			Конфигуратор.УдалитьВременнуюБазу();
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;

	Конфигуратор.УдалитьВременнуюБазу();
	Возврат Истина;
КонецФункции

Функция ПолучитьКаталогГит(ВременныйКаталогИсходников)
	Лог.КритичнаяОшибка("Не реализован вариант клонирования репозитория");
	Возврат Ложь;
КонецФункции

Функция ВыгрузитьИНайтиИсходники() Экспорт
	
	// подготовка структуры данных результата
	Результат = Новый Массив;

	// подготовка временного каталога для исходников
	ВременныйКаталогИсходников = ВременныйКаталог + "\source_" + ИдентификаторПроцесса;

	// выгружаем в исходники
	Если ТипИсходника = "src" Тогда
		ВременныйКаталогИсходников = Source;
		КаталогИсходныхФайловДляРезультата = "";
	ИначеЕсли ТипИсходника = "cf" Тогда
		СоздатьКаталог(ВременныйКаталогИсходников);
		КаталогИсходныхФайловДляРезультата = ВременныйКаталогИсходников;
		Если Не ВыгрузитьФайлКонфигурации(ВременныйКаталогИсходников) Тогда
			ВременныйКаталогИсходников = "";
		КонецЕсли;
	ИначеЕсли ТипИсходника = "cfe" Тогда
		СоздатьКаталог(ВременныйКаталогИсходников);
		КаталогИсходныхФайловДляРезультата = ВременныйКаталогИсходников;
		Если Не ВыгрузитьФайлКонфигурации(ВременныйКаталогИсходников, Истина) Тогда
			ВременныйКаталогИсходников = "";
		КонецЕсли;
	ИначеЕсли ТипИсходника = "repocf" Тогда
		СоздатьКаталог(ВременныйКаталогИсходников);
		КаталогИсходныхФайловДляРезультата = ВременныйКаталогИсходников;
		Если Не ВыгрузитьКонфигурациюХранилища(ВременныйКаталогИсходников) Тогда
			ВременныйКаталогИсходников = "";
		КонецЕсли;
	ИначеЕсли ТипИсходника = "repocfe" Тогда
		СоздатьКаталог(ВременныйКаталогИсходников);
		КаталогИсходныхФайловДляРезультата = ВременныйКаталогИсходников;
		Если Не ВыгрузитьКонфигурациюРасширенияХранилища(ВременныйКаталогИсходников) Тогда
			ВременныйКаталогИсходников = "";
		КонецЕсли;
	ИначеЕсли ТипИсходника = "git" Тогда
		СоздатьКаталог(ВременныйКаталогИсходников);
		КаталогИсходныхФайловДляРезультата = ВременныйКаталогИсходников;
		Если Не ПолучитьКаталогГит(ВременныйКаталогИсходников) Тогда
			ВременныйКаталогИсходников = "";
		КонецЕсли;
	ИначеЕсли ТипИсходника = "ib" Тогда
		СоздатьКаталог(ВременныйКаталогИсходников);
		КаталогИсходныхФайловДляРезультата = ВременныйКаталогИсходников;
		Если Не ВыгрузитьОбработкиБазы(ВременныйКаталогИсходников) Тогда
			ВременныйКаталогИсходников = "";
		КонецЕсли;
	Иначе
		ВременныйКаталогИсходников = "";
	КонецЕсли;

	// ищем файлы
	Если ЗначениеЗаполнено(ВременныйКаталогИсходников) Тогда
		// проверим, возможно ВременныйКаталогИсходников - это файл
		ОбъектФайла = Новый Файл(ВременныйКаталогИсходников);
		Если ОбъектФайла.ЭтоФайл() Тогда
			Для Каждого ФорматФайла Из ФорматыФайловДляАнализа Цикл
				РегулярноеВыражениеФормата = Новый РегулярноеВыражение(СтрЗаменить(ФорматФайла, "*", "."));
				Если РегулярноеВыражениеФормата.Совпадает(ОбъектФайла.Имя) Тогда
					ОписаниеФайла = Новый Соответствие;
					// этот вариант возможен только для типа исходника src
					ОписаниеФайла.Вставить("ВременныйКаталог", "");
					ОписаниеФайла.Вставить("ИмяФайлаДоВременногоКаталога", ОбъектФайла.ПолноеИмя);
					Результат.Добавить(ОписаниеФайла);
					Прервать;
				КонецЕсли;
			КонецЦикла;

		Иначе
			Для Каждого ФорматФайла Из ФорматыФайловДляАнализа Цикл
				НайденныеФайлы = НайтиФайлы(ВременныйКаталогИсходников + "\", ФорматФайла, Истина);
				Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
					ОписаниеФайла = Новый Соответствие;
					Если ТипИсходника = "src" Тогда
						ОписаниеФайла.Вставить("ВременныйКаталог", "");
						ОписаниеФайла.Вставить("ИмяФайлаДоВременногоКаталога", НайденныйФайл.ПолноеИмя);
					Иначе
						ОписаниеФайла.Вставить("ВременныйКаталог", КаталогИсходныхФайловДляРезультата);
						ОписаниеФайла.Вставить("ИмяФайлаДоВременногоКаталога", СтрЗаменить(НайденныйФайл.ПолноеИмя, ВременныйКаталогИсходников, ""));
					КонецЕсли;
					Результат.Добавить(ОписаниеФайла);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// помещение результата в файл
	Если ЗначениеЗаполнено(ФайлРезультатаПроцесса) Тогда
		ОбщиеМетоды.ЗаписатьФайлJSON(ФайлРезультатаПроцесса, Результат);
	КонецЕсли;

	Возврат Результат;
КонецФункции

ПутьКФайлуПустойКонфигурацииРасширения = "./tools/clearcfe.cfe";

ДопустимыеТипыИсходников = Новый Соответствие;
ДопустимыеТипыИсходников.Вставить("src", Истина);
ДопустимыеТипыИсходников.Вставить("cf", Истина);
ДопустимыеТипыИсходников.Вставить("cfe", Истина);
ДопустимыеТипыИсходников.Вставить("repocf", Истина);
ДопустимыеТипыИсходников.Вставить("repocfe", Истина);
ДопустимыеТипыИсходников.Вставить("git", Истина);
ДопустимыеТипыИсходников.Вставить("ib", Истина);

СтрокаДопустимыхТиповИсходников = "";
Для Каждого ДопустимыйТипМсходника Из ДопустимыеТипыИсходников Цикл
	СтрокаДопустимыхТиповИсходников = СтрокаДопустимыхТиповИсходников + ?(ЗначениеЗаполнено(СтрокаДопустимыхТиповИсходников), ", ", "");
	СтрокаДопустимыхТиповИсходников = СтрокаДопустимыхТиповИсходников + ДопустимыйТипМсходника.Ключ;
КонецЦикла;

ОбщиеМетоды = ЗагрузитьСценарий(ТекущийСценарий().Каталог + "\commonmethods.os");

Если СтартовыйСценарий().Источник = ТекущийСценарий().Источник Тогда
	ПриСозданииОбъекта();
	Инициализация();
	Если Не ДанныеКорректны Тогда
		ЗавершитьРаботу(1);
	КонецЕсли;
	Результат = ВыгрузитьИНайтиИсходники();
	ЗавершитьРаботу(0);
КонецЕсли;