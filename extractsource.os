#Использовать v8runner
#Использовать logos

Перем ВременныйКаталог;
Перем ИдентификаторПроцесса;
Перем ОписаниеИсходника;
Перем ФорматыФайловДляАнализа;
Перем ФайлОбработкиВыгрузкиДопОбработок;
Перем ФайлРезультатаПроцесса;
Перем Лог;
Перем ОсновнойСкрипт;
Перем ОсновнойОбъект;
Перем ТипИсходника;
Перем Source;
Перем User;
Перем Pwd;
Перем НомерВерсииХранилища;
Перем ДопустимыеТипыИсходников;
Перем СтрокаДопустимыхТиповИсходников;
Перем ДанныеКорректны;
Перем ВерсияПлатформы;

Процедура ПриСозданииОбъекта(НастройкиВыполнения = Неопределено)
	ОсновнойСкрипт = ЗагрузитьСценарий("sourcefinderfor1c.os");
	// определим объект вызова (если нет - используем основной скрипт)
	Попытка
		ОсновнойОбъект = ЗагрузитьСценарий(СтартовыйСценарий().Каталог + "/" + СтартовыйСценарий().Источник);
		ФорматированноеСообщение = ОсновнойОбъект.Форматировать(УровниЛога, УровниЛога.Отладка, "тест наличия экспортного метода форматирования для лога");
	Исключение
		ОсновнойОбъект = ОсновнойСкрипт;
	КонецПопытки;
	// обработка настроек
	Если НастройкиВыполнения = Неопределено Тогда
		Если АргументыКоманднойСтроки.Количество() > 0 Тогда
			ФайлНастроекВыполнения = АргументыКоманднойСтроки[0];
		Иначе
			ФайлНастроекВыполнения = СтрЗаменить(ТекущийСценарий().Источник, ".os", ".json");
		КонецЕсли;
		Если НайтиФайлы(ФайлНастроекВыполнения).Количество() > 0 Тогда
			НастройкиВыполнения = ОсновнойСкрипт.ПрочитатьФайлJSON(ФайлНастроекВыполнения);
		КонецЕсли;
	КонецЕсли;

	УстановитьНастройкиВыполнения(НастройкиВыполнения);
КонецПроцедуры

Процедура УстановитьНастройкиВыполнения(НастройкиВыполнения, ИменаНастроек = Неопределено) Экспорт
	Если ИменаНастроек = Неопределено Тогда
		ИменаНастроек = "ВременныйКаталог, ИдентификаторПроцесса, ОписаниеИсходника, ФорматыФайловДляАнализа, ФайлОбработкиВыгрузкиДопОбработок, ФайлРезультатаПроцесса, Лог, ВерсияПлатформы";
	КонецЕсли;
	СтруктураИменНастроек = Новый Структура(ИменаНастроек);
	СтруктураНастроек = Новый Структура;
	Для Каждого ЭлементСтруктурыИменНастроек Из СтруктураИменНастроек Цикл
		Выполнить(ЭлементСтруктурыИменНастроек.Ключ + " = НастройкиВыполнения.Получить(ЭлементСтруктурыИменНастроек.Ключ);");
	КонецЦикла;
КонецПроцедуры

Процедура Инициализация() Экспорт
	// ИдентификаторПроцесса
	Если Не ЗначениеЗаполнено(ИдентификаторПроцесса) Тогда
		ИдентификаторПроцесса = Лев(Строка(Новый УникальныйИдентификатор()), 8);
	КонецЕсли;
	// Временный каталог
	Если Не ЗначениеЗаполнено(ВременныйКаталог) Тогда
		ВременныйКаталог = ТекущийСценарий().Каталог + "/" + ИдентификаторПроцесса;
	КонецЕсли;
	Если НайтиФайлы(ВременныйКаталог).Количество() = 0 Тогда
		СоздатьКаталог(ВременныйКаталог);
	КонецЕсли;
	// ФайлРезультатаПроцесса
	Если Не ЗначениеЗаполнено(ФайлРезультатаПроцесса) Тогда
		ФайлРезультатаПроцесса = ВременныйКаталог + "/process_result_" + ИдентификаторПроцесса;
	КонецЕсли;
	// Лог
	Если Лог = Неопределено Тогда
		Лог = Логирование.ПолучитьЛог("oscript.app.extractsource");
		Лог.УстановитьРаскладку(ОсновнойОбъект);
	КонецЕсли;
	
	// проверка параметров
	ДанныеКорректны = Истина;
	Если ОписаниеИсходника = Неопределено ИЛИ ТипЗнч(ОписаниеИсходника) <> Тип("Соответствие") Тогда
		ДанныеКорректны = Ложь;
		Лог.КритичнаяОшибка("Параметр ""ОписаниеИсходника"" отсутствует или не является соответствием/структурой.");
	Иначе
		ТипИсходника = ОписаниеИсходника.Получить("ТипИсходника");
		Если ТипИсходника = Неопределено Тогда
			ДанныеКорректны = Ложь;
			Лог.КритичнаяОшибка("Параметр ""ТипИсходника"" отсутствует или не является соответствием/структурой.");
		КонецЕсли;
		Если ДопустимыеТипыИсходников.Получить(ТипИсходника) = Неопределено Тогда
			ДанныеКорректны = Ложь;
			Лог.КритичнаяОшибка("Значение параметра ""ТипИсходника"" отсутствует в списке допустимых типов (" + СтрокаДопустимыхТиповИсходников + ").");
		КонецЕсли;
		Source = ОписаниеИсходника.Получить("Source");
		Если Не ЗначениеЗаполнено(Source) Тогда
			ДанныеКорректны = Ложь;
			Лог.КритичнаяОшибка("Параметр ""Source"" отсутствует или не заполнен.");
		КонецЕсли;
		User = ОписаниеИсходника.Получить("User");
		Если Не ЗначениеЗаполнено(User) И (ТипИсходника = "repocf" ИЛИ ТипИсходника = "repocfe") Тогда
			ДанныеКорректны = Ложь;
			Лог.КритичнаяОшибка("Параметр ""Usr"" отсутствует или не заполнен. Для типов repocf и repocfe этот параметр обязателен");
		КонецЕсли;
		Pwd = ОписаниеИсходника.Получить("Pwd");
		Если Не ЗначениеЗаполнено(Pwd) Тогда
			Pwd = "";
		КонецЕсли;
		НомерВерсииХранилища = ОписаниеИсходника.Получить("НомерВерсииХранилища");
		Если Не ЗначениеЗаполнено(НомерВерсииХранилища) Тогда
			НомерВерсииХранилища = 0;
		КонецЕсли;
	КонецЕсли;
	Если Не ДанныеКорректны Тогда
		Лог.КритичнаяОшибка("Операции завершены.");
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьОбъектУправленияКонфигуратором()
	Попытка
		Конфигуратор = Новый УправлениеКонфигуратором();
		Если ЗначениеЗаполнено(ВерсияПлатформы) Тогда
			Конфигуратор.ИспользоватьВерсиюПлатформы(ВерсияПлатформы);
		КонецЕсли;
	Исключение
		Лог.КритичнаяОшибка("Не удалось инициализировать объект управления конфигуратором: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	Возврат Конфигуратор;
КонецФункции

Функция СоздатьКаталогВременнойИБ(РодительскийКаталог, ИмяНовогоКаталога)
	Попытка
		КаталогВременнойИБ = РодительскийКаталог + "/" + ИмяНовогоКаталога;
		СоздатьКаталог(КаталогВременнойИБ);
	Исключение
		Лог.КритичнаяОшибка("Не удалось создать каталог для временной ИБ: " + КаталогВременнойИБ);
		Возврат Неопределено;
	КонецПопытки;
	Возврат ИмяНовогоКаталога;
КонецФункции

Процедура УдалитьКаталогВременнойИБ(ПутьККаталогу)
	Попытка
		УдалитьФайлы(ПутьККаталогу + "/", "*");
		УдалитьФайлы(ПутьККаталогу);
	Исключение
		Лог.Ошибка("Не удалось удалить каталог для временной ИБ: " + ПутьККаталогу);
	КонецПопытки;
КонецПроцедуры

Функция ВыгрузитьКонфигурациюИБВФайлы(Конфигуратор, КаталогВыгрузки, ЭтоРасширение)
	Попытка
		Если ЭтоРасширение Тогда
			Конфигуратор.ВыгрузитьРасширениеВФайлы(КаталогВыгрузки, "Расширение1");
		Иначе
			Конфигуратор.ВыгрузитьКонфигурациюВФайлы(КаталогВыгрузки);
		КонецЕсли;
	Исключение
		ТекстОшибки = "Не удалось выгрузить конфигурацию (" + Source + ") в файлы во временный каталог: " + КаталогВыгрузки;
		Если ЭтоРасширение Тогда
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "конфигурацию", "расширение конфигурации");
		КонецЕсли;
		Лог.КритичнаяОшибка(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

Функция ВыгрузитьФайлКонфигурации(ВременныйКаталогИсходников, ЭтоРасширение = Ложь)
	// создадим каталог временной ИБ
	КаталогВременнойИБ = СоздатьКаталогВременнойИБ(ВременныйКаталогИсходников, "tempdb");
	Если КаталогВременнойИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// инициализируем объект управления конфигуратором
	Конфигуратор = ПолучитьОбъектУправленияКонфигуратором();
	Если Конфигуратор = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Создадим временную ИБ
	Попытка
		Конфигуратор.СоздатьФайловуюБазу(КаталогВременнойИБ);
		Конфигуратор.УстановитьКонтекст("/F" + КаталогВременнойИБ);
	Исключение
		Лог.КритичнаяОшибка("Не удалось создать временную ИБ: " + КаталогВременнойИБ);
		Возврат Ложь;
	КонецПопытки;

	// загрузим файл конфигурации во временную ИБ
	Попытка
		Если ЭтоРасширение Тогда
			Конфигуратор.ЗагрузитьРасширениеИзФайла(Source, "Расширение1");
		Иначе
			Конфигуратор.ЗагрузитьКонфигурациюИзФайла(Source);
		КонецЕсли;
	Исключение
		ТекстОшибки = "Не удалось загрузить конфигурацию (" + Source + ") во временную ИБ: " + КаталогВременнойИБ;
		Если ЭтоРасширение Тогда
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "конфигурацию", "расширение конфигурации");
		КонецЕсли;
		Лог.КритичнаяОшибка(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	// создадим каталог исходников
	КаталогВыгрузки = СоздатьКаталогВременнойИБ(ВременныйКаталогИсходников, "src");
	Если КаталогВыгрузки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// выгрузим конфигурацию временной ИБ в файлы
	Если Не ВыгрузитьКонфигурациюИБВФайлы(Конфигуратор, КаталогВыгрузки, ЭтоРасширение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// удалим каталог временной ИБ
	УдалитьКаталогВременнойИБ(КаталогВременнойИБ);

	Возврат Истина;
КонецФункции

Функция ВыгрузитьКонфигурациюХранилища(ВременныйКаталогИсходников, ЭтоРасширение = Ложь)
	// создадим каталог временной ИБ
	КаталогВременнойИБ = СоздатьКаталогВременнойИБ(ВременныйКаталогИсходников, "tempdb");
	Если КаталогВременнойИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// инициализируем объект управления конфигуратором
	Конфигуратор = ПолучитьОбъектУправленияКонфигуратором();
	Если Конфигуратор = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// Создадим временную ИБ
	Попытка
		Конфигуратор.СоздатьФайловуюБазу(КаталогВременнойИБ);
		Конфигуратор.УстановитьКонтекст("/F" + КаталогВременнойИБ);
	Исключение
		Лог.КритичнаяОшибка("Не удалось создать временную ИБ: " + КаталогВременнойИБ);
		Возврат Ложь;
	КонецПопытки;

	// загрузим конфигурацию из хранилища во временную ИБ
	Попытка
		Конфигуратор.ЗагрузитьКонфигурациюИзХранилища(Source, User, Pwd, НомерВерсииХранилища);
	Исключение
		Лог.КритичнаяОшибка("Не удалось получить конфигурацию из хранилища (" + Source + ") во временную ИБ: " + КаталогВременнойИБ);
		Возврат Ложь;
	КонецПопытки;
	
	// создадим каталог исходников
	КаталогВыгрузки = СоздатьКаталогВременнойИБ(ВременныйКаталогИсходников, "src");
	Если КаталогВыгрузки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	// выгрузим конфигурацию временной ИБ в файлы
	Если Не ВыгрузитьКонфигурациюИБВФайлы(Конфигуратор, КаталогВыгрузки, ЭтоРасширение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// удалим каталог временной ИБ
	УдалитьКаталогВременнойИБ(КаталогВременнойИБ);

	Возврат Истина;
КонецФункции

Процедура ВыгрузкаВИсходники()
	
	// подготовка структуры данных результата
	Результат = Новый Соответствие;

	// подготовка временного каталога для исходников
	ВременныйКаталогИсходников = ВременныйКаталог + "/source_" + ИдентификаторПроцесса;

	// выгружаем в исходники
	Если ТипИсходника = "src" Тогда
		ВременныйКаталогИсходников = Source;
		КаталогИсходныхФайловДляРезультата = "";
	ИначеЕсли ТипИсходника = "cf" Тогда
		СоздатьКаталог(ВременныйКаталогИсходников);
		КаталогИсходныхФайловДляРезультата = ВременныйКаталогИсходников;
		Если Не ВыгрузитьФайлКонфигурации(ВременныйКаталогИсходников) Тогда
			ВременныйКаталогИсходников = "";
		КонецЕсли;
	ИначеЕсли ТипИсходника = "cfe" Тогда
		СоздатьКаталог(ВременныйКаталогИсходников);
		КаталогИсходныхФайловДляРезультата = ВременныйКаталогИсходников;
		Если Не ВыгрузитьФайлКонфигурации(ВременныйКаталогИсходников, Истина) Тогда
			ВременныйКаталогИсходников = "";
		КонецЕсли;
	ИначеЕсли ТипИсходника = "repocf" Тогда
		СоздатьКаталог(ВременныйКаталогИсходников);
		КаталогИсходныхФайловДляРезультата = ВременныйКаталогИсходников;
		Если Не ВыгрузитьКонфигурациюХранилища(ВременныйКаталогИсходников) Тогда
			ВременныйКаталогИсходников = "";
		КонецЕсли;
	ИначеЕсли ТипИсходника = "repocfe" Тогда
		СоздатьКаталог(ВременныйКаталогИсходников);
		КаталогИсходныхФайловДляРезультата = ВременныйКаталогИсходников;
		Если Не ВыгрузитьКонфигурациюХранилища(ВременныйКаталогИсходников, Истина) Тогда
			ВременныйКаталогИсходников = "";
		КонецЕсли;
	ИначеЕсли ТипИсходника = "git" Тогда
		СоздатьКаталог(ВременныйКаталогИсходников);
		КаталогИсходныхФайловДляРезультата = ВременныйКаталогИсходников;
		Если Не ПолучитьКаталогГит(ВременныйКаталогИсходников) Тогда
			ВременныйКаталогИсходников = "";
		КонецЕсли;
	ИначеЕсли ТипИсходника = "ib" Тогда
		СоздатьКаталог(ВременныйКаталогИсходников);
		КаталогИсходныхФайловДляРезультата = ВременныйКаталогИсходников;
		Если Не ВыгрузитьОбработкиБазы(ВременныйКаталогИсходников) Тогда
			ВременныйКаталогИсходников = "";
		КонецЕсли;
	Иначе
		ВременныйКаталогИсходников = "";
	КонецЕсли;

	// ищем файлы
	Если ЗначениеЗаполнено(ВременныйКаталогИсходников) Тогда
		Для Каждого ФорматФайла Из ФорматыФайловДляАнализа Цикл
			НайденныеФайлы = НайтиФайлы(ВременныйКаталогИсходников + "/", ФорматФайла, Истина);
			Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
				ОписаниеФайла = Новый Соответствие;
				Если ТипИсходника = "src" Тогда
					ОписаниеФайла.Вставить("ВременныйКаталог", "");
					ОписаниеФайла.Вставить("ИмяФайлаДоВременногоКаталога", НайденныйФайл.ПолноИмя);
				Иначе
					ОписаниеФайла.Вставить("ВременныйКаталог", КаталогИсходныхФайловДляРезультата);
					ОписаниеФайла.Вставить("ИмяФайлаДоВременногоКаталога", СтрЗаменить(НайденныйФайл.ПолноИмя, ВременныйКаталогИсходников + "/", ""));
				КонецЕсли;
				Результат.Добавить(ОписаниеФайла);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	// помещение результата в файл
	ОсновнойСкрипт.ЗаписатьФайлJSON(ФайлРезультатаПроцесса, Результат);
КонецПроцедуры

ДопустимыеТипыИсходников = Новый Соответствие;
ДопустимыеТипыИсходников.Вставить("src", Истина);
ДопустимыеТипыИсходников.Вставить("cf", Истина);
ДопустимыеТипыИсходников.Вставить("cfe", Истина);
ДопустимыеТипыИсходников.Вставить("repocf", Истина);
ДопустимыеТипыИсходников.Вставить("repocfe", Истина);
ДопустимыеТипыИсходников.Вставить("git", Истина);
ДопустимыеТипыИсходников.Вставить("ib", Истина);

СтрокаДопустимыхТиповИсходников = "";
Для Каждого ДопустимыйТипМсходника Из ДопустимыеТипыИсходников Цикл
	СтрокаДопустимыхТиповИсходников = СтрокаДопустимыхТиповИсходников + ?(ЗначениеЗаполнено(СтрокаДопустимыхТиповИсходников), ", ", "");
	СтрокаДопустимыхТиповИсходников = СтрокаДопустимыхТиповИсходников + ДопустимыйТипМсходника.Ключ;
КонецЦикла;

Если СтартовыйСценарий().Источник = ТекущийСценарий().Источник Тогда
	Инициализация();
	Если Не ДанныеКорректны Тогда
		ЗавершитьРаботу(1);
	КонецЕсли;
	ВыгрузкаВИсходники();
КонецЕсли;